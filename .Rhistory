pf(2.101, 6, 538, lower.tail = FALSE)
#Set 3 theta values and pick a known value for V
theta = c(0,1,2)
V=1
K=3
#Approximate expectation of the sum of squares
#Do this by averaging the observed sum of squares
#for a large number of simulated Y1,Y2,Y3 values
#using the given theta's as mean values
nsim = 100000
#Create sums of squares using Yi's and using stein estimate
ss0 = ss1 = rep(0,nsim)
ss0
#Conduct nsim simulations
for(iter in 1:nsim){
#generate y|theta,V ~ N(theta,V)
y =theta +  sqrt(V)*rnorm(k)
#y is a k-vector, with E(yi)=thetai, i=1,..,k
# save sum of squares for yi's
ss0[iter]=sum((y-theta)^2)
#Compute james-stein estimates
#k=3 so shrink towars mu = 0
Bhat = (k-2)*V/sum(y^2)
thetahat = Bhat*0 + (1-Bhat)*y
#Store sum of squares for thetahats
ss1[iter] = sum((thetahat - theta)^2)
#Print out every 1000th iteration
if(iter/1000 == round(iter/1000)) cat(iter,", ")
}
#Conduct nsim simulations
for(iter in 1:nsim){
#generate y|theta,V ~ N(theta,V)
y =theta +  sqrt(V)*rnorm(k)
#y is a k-vector, with E(yi)=thetai, i=1,..,k
# save sum of squares for yi's
ss0[iter]=sum((y-theta)^2)
#Compute james-stein estimates
#k=3 so shrink towars mu = 0
Bhat = (K-2)*V/sum(y^2)
thetahat = Bhat*0 + (1-Bhat)*y
#Store sum of squares for thetahats
ss1[iter] = sum((thetahat - theta)^2)
#Print out every 1000th iteration
if(iter/1000 == round(iter/1000)) cat(iter,", ")
}
#Conduct nsim simulations
for(iter in 1:nsim){
#generate y|theta,V ~ N(theta,V)
y =theta +  sqrt(V)*rnorm(K)
#y is a k-vector, with E(yi)=thetai, i=1,..,k
# save sum of squares for yi's
ss0[iter]=sum((y-theta)^2)
#Compute james-stein estimates
#k=3 so shrink towars mu = 0
Bhat = (K-2)*V/sum(y^2)
thetahat = Bhat*0 + (1-Bhat)*y
#Store sum of squares for thetahats
ss1[iter] = sum((thetahat - theta)^2)
#Print out every 1000th iteration
if(iter/1000 == round(iter/1000)) cat(iter,", ")
}
#Compare average sum of squares values
mean(ss0); mean(ss1)
#Compute ratio: ss1 should be smaller, so ratio should always be >1
mean(ss0)/mean(ss1)
#Set 4 theta values and pick a known value for V
theta = c(-1,0,1,2)
V=1
K=4
#Approximate expectation of the sum of squares
#Do this by averaging the observed sum of squares
#for a large number of simulated Y1,Y2,Y3,Y4 values
#using the given theta's as mean values
nsim = 100000
#Create sums of squares using Yi's and using stein estimate
ss0 = ss1 = rep(0,nsim)
#Conduct nsim simulations
for(iter in 1:nsim){
#generate y|theta,V ~ N(theta,V)
y = theta + sqrt(V)*rnorm(K)
#y is a k-vector, with E(yi)=thetai, i=1,..,k
# save sum of squares for yi's
ss0[iter]=sum((y-theta)^2)
#Compute james-stein estimates
ybar = mean(y)
Bhat = (K-3)*V/sum((y-ybar)^2)
thetahat = Bhat*ybar + (1-Bhat)*y
#Store sum of squares for thetahats
ss1[iter] = sum((thetahat - theta)^2)
#Print out every 1000th iteration
if(iter/1000 == round(iter/1000)) cat(iter,", ")
}
#Compare average sum of squares values
mean(ss0); mean(ss1)
#Compute ratio: ss1 should be smaller, so ratio should always be >1
mean(ss0)/mean(ss1)
#Set 4 theta values and pick a known value for V
theta = c(71.3,70.7,72.8,70.1)
V=6.0/5
K=4
#Approximate expectation of the sum of squares
#Do this by averaging the observed sum of squares
#for a large number of simulated Y1,Y2,Y3,Y4 values
#using the given theta's as mean values
nsim = 100000
#Create sums of squares using Yi's and using stein estimate
ss0 = ss1 = rep(0,nsim)
#Conduct nsim simulations
for(iter in 1:nsim){
#generate y|theta,V ~ N(theta,V)
y = theta + sqrt(V)*rnorm(K)
#y is a k-vector, with E(yi)=thetai, i=1,..,k
# save sum of squares for yi's
ss0[iter]=sum((y-theta)^2)
#Compute james-stein estimates
ybar = mean(y)
Bhat = (K-3)*V/sum((y-ybar)^2)
thetahat = Bhat*ybar + (1-Bhat)*y
#Store sum of squares for thetahats
ss1[iter] = sum((thetahat - theta)^2)
#Print out every 1000th iteration
if(iter/1000 == round(iter/1000)) cat(iter,", ")
}
#Compare average sum of squares values
mean(ss0); mean(ss1)
#Compute ratio: ss1 should be smaller, so ratio should always be >1
mean(ss0)/mean(ss1)
#Compute ratio: ss1 should be smaller, so ratio should always be >1
mean(ss0)/mean(ss1)
```
# Sources
https://statweb.stanford.edu/~joftius/slides/testing.pdf
Efrom & Morris 1977: Stein's Paradox
Everson - Steins Paradox
